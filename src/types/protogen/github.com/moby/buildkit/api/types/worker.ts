// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.11.4
// source: github.com/moby/buildkit/api/types/worker.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Platform } from "../../solver/pb/ops";
import Long = require("long");

export const protobufPackage = "moby.buildkit.v1.types";

export interface WorkerRecord {
  ID: string;
  Labels: { [key: string]: string };
  platforms: Platform[];
  GCPolicy: GCPolicy[];
  BuildkitVersion: BuildkitVersion | undefined;
}

export interface WorkerRecord_LabelsEntry {
  key: string;
  value: string;
}

export interface GCPolicy {
  all: boolean;
  keepDuration: number;
  keepBytes: number;
  filters: string[];
}

export interface BuildkitVersion {
  package: string;
  version: string;
  revision: string;
}

function createBaseWorkerRecord(): WorkerRecord {
  return { ID: "", Labels: {}, platforms: [], GCPolicy: [], BuildkitVersion: undefined };
}

export const WorkerRecord = {
  encode(message: WorkerRecord, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ID !== "") {
      writer.uint32(10).string(message.ID);
    }
    Object.entries(message.Labels).forEach(([key, value]) => {
      WorkerRecord_LabelsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    for (const v of message.platforms) {
      Platform.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.GCPolicy) {
      GCPolicy.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.BuildkitVersion !== undefined) {
      BuildkitVersion.encode(message.BuildkitVersion, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WorkerRecord {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ID = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = WorkerRecord_LabelsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.Labels[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.platforms.push(Platform.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.GCPolicy.push(GCPolicy.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.BuildkitVersion = BuildkitVersion.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerRecord {
    return {
      ID: isSet(object.ID) ? globalThis.String(object.ID) : "",
      Labels: isObject(object.Labels)
        ? Object.entries(object.Labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      platforms: globalThis.Array.isArray(object?.platforms)
        ? object.platforms.map((e: any) => Platform.fromJSON(e))
        : [],
      GCPolicy: globalThis.Array.isArray(object?.GCPolicy) ? object.GCPolicy.map((e: any) => GCPolicy.fromJSON(e)) : [],
      BuildkitVersion: isSet(object.BuildkitVersion) ? BuildkitVersion.fromJSON(object.BuildkitVersion) : undefined,
    };
  },

  toJSON(message: WorkerRecord): unknown {
    const obj: any = {};
    if (message.ID !== "") {
      obj.ID = message.ID;
    }
    if (message.Labels) {
      const entries = Object.entries(message.Labels);
      if (entries.length > 0) {
        obj.Labels = {};
        entries.forEach(([k, v]) => {
          obj.Labels[k] = v;
        });
      }
    }
    if (message.platforms?.length) {
      obj.platforms = message.platforms.map((e) => Platform.toJSON(e));
    }
    if (message.GCPolicy?.length) {
      obj.GCPolicy = message.GCPolicy.map((e) => GCPolicy.toJSON(e));
    }
    if (message.BuildkitVersion !== undefined) {
      obj.BuildkitVersion = BuildkitVersion.toJSON(message.BuildkitVersion);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerRecord>, I>>(base?: I): WorkerRecord {
    return WorkerRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerRecord>, I>>(object: I): WorkerRecord {
    const message = createBaseWorkerRecord();
    message.ID = object.ID ?? "";
    message.Labels = Object.entries(object.Labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.platforms = object.platforms?.map((e) => Platform.fromPartial(e)) || [];
    message.GCPolicy = object.GCPolicy?.map((e) => GCPolicy.fromPartial(e)) || [];
    message.BuildkitVersion = (object.BuildkitVersion !== undefined && object.BuildkitVersion !== null)
      ? BuildkitVersion.fromPartial(object.BuildkitVersion)
      : undefined;
    return message;
  },
};

function createBaseWorkerRecord_LabelsEntry(): WorkerRecord_LabelsEntry {
  return { key: "", value: "" };
}

export const WorkerRecord_LabelsEntry = {
  encode(message: WorkerRecord_LabelsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WorkerRecord_LabelsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerRecord_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerRecord_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: WorkerRecord_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerRecord_LabelsEntry>, I>>(base?: I): WorkerRecord_LabelsEntry {
    return WorkerRecord_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerRecord_LabelsEntry>, I>>(object: I): WorkerRecord_LabelsEntry {
    const message = createBaseWorkerRecord_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGCPolicy(): GCPolicy {
  return { all: false, keepDuration: 0, keepBytes: 0, filters: [] };
}

export const GCPolicy = {
  encode(message: GCPolicy, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.all !== false) {
      writer.uint32(8).bool(message.all);
    }
    if (message.keepDuration !== 0) {
      writer.uint32(16).int64(message.keepDuration);
    }
    if (message.keepBytes !== 0) {
      writer.uint32(24).int64(message.keepBytes);
    }
    for (const v of message.filters) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GCPolicy {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGCPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.all = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.keepDuration = longToNumber(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.keepBytes = longToNumber(reader.int64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filters.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GCPolicy {
    return {
      all: isSet(object.all) ? globalThis.Boolean(object.all) : false,
      keepDuration: isSet(object.keepDuration) ? globalThis.Number(object.keepDuration) : 0,
      keepBytes: isSet(object.keepBytes) ? globalThis.Number(object.keepBytes) : 0,
      filters: globalThis.Array.isArray(object?.filters) ? object.filters.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GCPolicy): unknown {
    const obj: any = {};
    if (message.all !== false) {
      obj.all = message.all;
    }
    if (message.keepDuration !== 0) {
      obj.keepDuration = Math.round(message.keepDuration);
    }
    if (message.keepBytes !== 0) {
      obj.keepBytes = Math.round(message.keepBytes);
    }
    if (message.filters?.length) {
      obj.filters = message.filters;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GCPolicy>, I>>(base?: I): GCPolicy {
    return GCPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GCPolicy>, I>>(object: I): GCPolicy {
    const message = createBaseGCPolicy();
    message.all = object.all ?? false;
    message.keepDuration = object.keepDuration ?? 0;
    message.keepBytes = object.keepBytes ?? 0;
    message.filters = object.filters?.map((e) => e) || [];
    return message;
  },
};

function createBaseBuildkitVersion(): BuildkitVersion {
  return { package: "", version: "", revision: "" };
}

export const BuildkitVersion = {
  encode(message: BuildkitVersion, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.package !== "") {
      writer.uint32(10).string(message.package);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.revision !== "") {
      writer.uint32(26).string(message.revision);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BuildkitVersion {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildkitVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.package = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.revision = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildkitVersion {
    return {
      package: isSet(object.package) ? globalThis.String(object.package) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      revision: isSet(object.revision) ? globalThis.String(object.revision) : "",
    };
  },

  toJSON(message: BuildkitVersion): unknown {
    const obj: any = {};
    if (message.package !== "") {
      obj.package = message.package;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.revision !== "") {
      obj.revision = message.revision;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildkitVersion>, I>>(base?: I): BuildkitVersion {
    return BuildkitVersion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildkitVersion>, I>>(object: I): BuildkitVersion {
    const message = createBaseBuildkitVersion();
    message.package = object.package ?? "";
    message.version = object.version ?? "";
    message.revision = object.revision ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
